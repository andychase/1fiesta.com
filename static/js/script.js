// Generated by CoffeeScript 1.3.3

/*
   Script.js - Script that powers 1fiesta. By Andy Chase.
*/

var BWtype, bounderyQ, buildInfoWindowContent, centerMapOnAddress, change_language, cleanFormatDate, clearMarkers, complexQ, current_lang, detect_language, dist, eventListing, eventTooCloseToAnother, eventTooCloseToBottomOfList, geocode, geocoder, getNewEventsRate, getNormalizedCoord, getQuery, get_location, iconnametypes, infoWindow, internetMapOptions, jumptoLocOrCookieLoc, listEvent, map, markersArray, markersTooCloseOnMap, markersTooCloseToBotOfPage, numberOfMarkersToShowOnPage, phrasePrefixQuery, point_in_rect, queryElasticSearch, setDateFilter, setUpMapSection, shouldHideEvent, switchDateFilter, updateInfoWindow, updateMarker, updateResults;

map = "";

geocoder = "";

markersArray = "";

infoWindow = "";

current_lang = "english";

/* Script options
*/


numberOfMarkersToShowOnPage = 90;

getNewEventsRate = 500;

/* ^ Milliseconds
*/


markersTooCloseToBotOfPage = 150;

markersTooCloseOnMap = function(zoom) {
  if (zoom > 9) {
    return (-2.4 * zoom) + 41.8;
  } else if (zoom > 0) {
    return 8000 / Math.pow(2, zoom - 1);
  } else {
    return 20000;
  }
};

iconnametypes = {
  "animal/agriculture": "birthday",
  "art festival": "birthday",
  "brewery": "birthday",
  "books": "reading",
  "charity event": "fundraising",
  "cultural heritage": "gathering",
  "exhibit": "screening",
  "exhibits": "conference",
  "fair": "birthday",
  "fairs/festivals": "birthday",
  "festival": "birthday",
  "festivals": "birthday",
  "food": "birthday",
  "holiday": "deadline",
  "performing arts": "performance",
  "sports": "sports",
  "visual arts": "performance",
  "winery": "birthday",
  "artshow": "screening",
  "concert": "concert",
  "spin city": "concert",
  "music calendar, music listing": "concert",
  "classical music": "concert"
};

window.mousingovernames = false;

window.beforeenteredcenter = null;

/* The main script!
*/


$(document).ready(function() {
  /* Set up map
  */
  if ($('#mapsection').length) {
    setUpMapSection();
    jumptoLocOrCookieLoc();
  }
  /* Date filter
  */

  if (window.QueryString['date'] != null) {
    $('.datefilter a').removeClass('active');
    $('.datefilter #' + window.QueryString['date']).addClass('active');
    window.activeDateFilter = window.QueryString['date'];
    setDateFilter(window.QueryString['date']);
  }
  $('.datefilter a').click(switchDateFilter);
  /* Search bar Autocompleter
  */

  $('#searchbox').keyup(function() {
    if ($('#searchbox').val() === "") {
      updateResults();
      return;
    }
    clearMarkers();
    return updateResults();
  });
  /* Sidebar corrector
  */

  $('#contentcolumn').mouseenter(function() {
    if (map.getCenter() != null) {
      if (!window.mousingovernames) {
        window.beforeenteredcenter = map.getCenter();
      }
      window.mousingovernames = true;
      return clearTimeout(window.mousingovertimer);
    }
  });
  return $('#contentcolumn').mouseleave(function() {
    if (window.beforeenteredcenter != null) {
      map.panTo(window.beforeenteredcenter);
      return window.mousingovertimer = setTimeout((function() {
        window.mousingovernames = false;
        return updateResults();
      }), 700);
    }
  });
});

setDateFilter = function(id) {
  $('.datefilter li').removeClass("active");
  return $('.datefilter li #' + id).addClass("active");
};

switchDateFilter = function() {
  $('.datefilter a').removeClass("active");
  $(this).addClass("active");
  window.activeDateFilter = $(this)[0].id;
  clearMarkers();
  return updateResults();
};

jumptoLocOrCookieLoc = function() {
  var jump_location, lat, lng, location, location_value, location_zoom;
  jump_location = "";
  if (window.QueryString["type"] === "Location") {
    jump_location = window.QueryString["q"].toString();
    if (jump_location === $.cookie("jump_location")) {
      jump_location = "";
    } else {
      $.cookie("jump_location", jump_location);
    }
  }
  location_value = $.cookie("location");
  location_zoom = Number($.cookie("location_zoom"));
  if (jump_location !== "") {
    return centerMapOnAddress(jump_location);
  } else if (!(location_value != null)) {
    return centerMapOnAddress("Oregon, USA");
  } else {
    lat = location_value.split(',')[0];
    lng = location_value.split(',')[1];
    location = new google.maps.LatLng(lat, lng);
    map.setCenter(location);
    return map.setZoom(location_zoom);
  }
};

updateResults = function() {
  var center_map_bounds, map_bounds;
  map_bounds = map.getBounds() != null ? map.getBounds() : "";
  center_map_bounds = map.getCenter() != null ? map.getCenter().toUrlValue() : "";
  detect_language(map.getCenter());
  $.cookie("location", center_map_bounds);
  $.cookie("location_zoom", map.getZoom());
  return queryElasticSearch(map_bounds, bounderyQ, function(data) {
    var e, hidden, i, marker, numberToProcess, _i, _results;
    data = data.hits.hits;
    $('#eventlist').empty();
    numberToProcess = Math.min(data.length - 1, numberOfMarkersToShowOnPage - 1);
    if (data.length > 0) {
      _results = [];
      for (i = _i = 0; 0 <= numberToProcess ? _i <= numberToProcess : _i >= numberToProcess; i = 0 <= numberToProcess ? ++_i : --_i) {
        e = data[i]._source;
        e.longitude = e.location.lon;
        e.latitude = e.location.lat;
        e.location = e.address;
        hidden = shouldHideEvent(e);
        marker = updateMarker(i, e, hidden);
        if (!hidden) {
          _results.push(listEvent(e, $('#eventlist'), marker));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else {
      if (current_lang === "chinese") {
        return $('#eventlist').append("<span class='nothing'>&#20160;&#20040;&#20063;&#27809;&#26377;</span>");
      } else {
        return $('#eventlist').append("<span class='nothing'>Nothing here, try zooming out or removing filters.</span>");
      }
    }
  });
};

/* Localization
*/


detect_language = function(center_of_map) {
  var chinese_cal, chinese_date_title, chinese_nav, chinese_search, english_cal, english_date_title, english_nav, english_search, lang;
  lang = get_location(center_of_map);
  if (lang !== current_lang) {
    current_lang = lang;
    switch (get_location(center_of_map)) {
      case "chinese":
        chinese_nav = [false, false, "&#35841;", "&#22238;&#39304;"];
        chinese_cal = ["&#25152;&#26377;&#20107;&#29289;", "&#20170;&#22825;", "&#26126;&#22825;", "&#36889;&#20491;&#26143;&#26399;", "&#36889;&#20491;&#26376;"];
        chinese_search = "&#23547;&#25214;";
        chinese_date_title = "&#35745; &#26102;";
        return change_language(chinese_search, chinese_date_title, chinese_nav, chinese_cal);
      default:
        english_nav = [false, false, "About", "Feedback"];
        english_cal = ["All", "Today", "Tomorrow", "Week", "Month"];
        english_search = "Search";
        english_date_title = "Date:";
        return change_language(english_search, english_date_title, english_nav, english_cal);
    }
  }
};

change_language = function(search, date_title, nav, cal) {
  $(".navigationbar form ul li").each(function(i) {
    if (nav[i]) {
      $(this).children("a").html(nav[i]);
    }
    if (i === 1) {
      return $(this).children()[1].value = $(document.createElement('div')).html(search).html();
    }
  });
  $(".datefilter span").html(date_title);
  return $(".datefilter ul li").each(function(i) {
    return $(this).children("a").html(cal[i]);
  });
};

get_location = function(center_of_map) {
  if (point_in_rect(center_of_map.lat(), center_of_map.lng(), 1.4552673222585695, 1.2456742607811258, 104.22431479101556, 103.56650839453118)) {
    return "chinese";
  } else {
    return "english";
  }
};

point_in_rect = function(x, y, rect_high_x, rect_low_x, rect_high_y, rect_low_y) {
  return x < rect_high_x && x > rect_low_x && y < rect_high_y && y > rect_low_y;
};

BWtype = function(map) {
  var styledMap, styles;
  styles = [
    {
      stylers: [
        {
          saturation: -100
        }
      ]
    }, {
      featureType: "road",
      elementType: "labels",
      stylers: [
        {
          visibility: "simplified"
        }
      ]
    }, {
      featureType: "administrative",
      elementType: "labels.text.fill",
      stylers: [
        {
          visibility: "on"
        }, {
          gamma: 0.01
        }
      ]
    }, {
      featureType: "administrative",
      elementType: "labels.text.stroke",
      stylers: [
        {
          weight: 3.1
        }, {
          color: "#ff7900"
        }, {
          lightness: 63
        }
      ]
    }, {
      featureType: "transit",
      stylers: [
        {
          visibility: "off"
        }
      ]
    }, {
      featureType: "poi",
      stylers: [
        {
          visibility: "off"
        }
      ]
    }, {
      featureType: "poi.park",
      stylers: [
        {
          visibility: "on"
        }
      ]
    }
  ];
  styledMap = new google.maps.StyledMapType(styles, {
    name: "Styled Map"
  });
  map.mapTypes.set("map_style", styledMap);
  return map.setMapTypeId("map_style");
};

setUpMapSection = function() {
  var controlDiv, myOptions, updateTimer, _i, _ref;
  myOptions = {
    zoom: 15,
    disableDefaultUI: true,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    mapTypeControl: false,
    mapTypeControlOptions: {
      mapTypeIds: [google.maps.MapTypeId.ROADMAP, "Internet"],
      position: google.maps.ControlPosition.RIGHT_TOP
    },
    scaleControl: false,
    panControl: true,
    panControlOptions: {
      style: google.maps.NavigationControlStyle.DEFAULT,
      position: google.maps.ControlPosition.RIGHT_CENTER
    },
    zoomControl: true,
    zoomControlOptions: {
      style: google.maps.NavigationControlStyle.DEFAULT,
      position: google.maps.ControlPosition.RIGHT_CENTER
    }
  };
  map = new google.maps.Map(document.getElementById("mapsection"), myOptions);
  /* Initialize internet (TODO: Special) maps
  */

  /*internetMapType = new google.maps.ImageMapType(internetMapOptions)
  */

  /*map.mapTypes.set "Internet", internetMapType
  */

  BWtype(map);
  /* This is a fix to push navigation below navigation section
  */

  controlDiv = document.createElement('DIV');
  controlDiv.innerHTML = "<br /> <br /> <br /> <br />";
  map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controlDiv);
  /* Set up markers, window, and geocoder
  */

  markersArray = [];
  for (_i = 0, _ref = numberOfMarkersToShowOnPage - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--) {
    markersArray.push(new google.maps.Marker());
  }
  infoWindow = new google.maps.InfoWindow();
  geocoder = new google.maps.Geocoder();
  /* Start rate limited event marker refresher
  */

  updateTimer = null;
  google.maps.event.addListener(map, 'bounds_changed', function() {
    if (!(updateTimer != null) && !window.mousingovernames) {
      return updateTimer = setTimeout(function() {
        updateResults();
        return updateTimer = null;
      }, getNewEventsRate);
    }
  });
  return true;
};

internetMapOptions = {
  getTileUrl: function(coord, zoom) {
    var bound, normalizedCoord;
    normalizedCoord = getNormalizedCoord(coord, zoom);
    if (!normalizedCoord) {
      return null;
    }
    bound = Math.pow(2, zoom);
    return "../../../static/internetmap" + "/" + zoom + "/" + normalizedCoord.x + "/" + (bound - normalizedCoord.y - 1) + ".png";
  },
  tileSize: new google.maps.Size(256, 256),
  maxZoom: 7,
  minZoom: 0,
  isPng: true,
  opacity: 1,
  radius: 1738000,
  name: "Internet"
};

/* Google maps helpers! ----------------------------------------------------
*/


centerMapOnAddress = function(address) {
  return geocoder.geocode({
    'address': address
  }, function(results, status) {
    if (status === google.maps.GeocoderStatus.OK) {
      $('#mapsection').show();
      $('#mapblanksection').hide();
      map.setCenter(results[0].geometry.location);
      return map.fitBounds(results[0].geometry.viewport);
    } else {
      $('#mapblanksection').show();
      return $('#mapsection').hide();
    }
  });
};

/* The internet map page side thing helper ----------------------------------
*/


getNormalizedCoord = function(coord, zoom) {
  var tileRange, x, y;
  y = coord.y;
  x = coord.x;
  /* tile range in one direction range is dependent on zoom level
  */

  /* 0 = 1 tile, 1 = 2 tiles, 2 = 4 tiles, 3 = 8 tiles, etc
  */

  tileRange = 1 << zoom;
  /* don't repeat across y-axis (vertically)
  */

  if (y < 0 || y >= tileRange) {
    return null;
  }
  /* repeat across x-axis
  */

  if (x < 0 || x >= tileRange) {
    x = (x % tileRange + tileRange) % tileRange;
  }
  return {
    x: x,
    y: y
  };
};

/*
  This script is for the placing of the markers &
    the populating of the site listing
*/


/* Event Icon placement on map! ----------------------------------------------
*/


shouldHideEvent = function(e) {
  var hidden;
  if (eventTooCloseToBottomOfList(e)) {
    hidden = true;
  } else if (eventTooCloseToAnother(e)) {
    hidden = true;
  } else {
    hidden = false;
  }
  return hidden;
};

eventTooCloseToBottomOfList = function(e) {
  var last;
  last = $("#eventlist li:last").offset();
  if (last !== null) {
    return $(window).height() < last.top + markersTooCloseToBotOfPage;
  } else {
    return false;
  }
};

dist = function(x1, y1, x2, y2) {
  var xs, ys;
  xs = x2 - x1;
  ys = y2 - y1;
  return (Math.sqrt((xs * xs) + (ys * ys))) * 2000;
};

eventTooCloseToAnother = function(e) {
  var d, marker, pos, smallestMarkerDist, _i, _len;
  for (_i = 0, _len = markersArray.length; _i < _len; _i++) {
    marker = markersArray[_i];
    if ((marker.getPosition() != null) && marker.getIcon() !== '/static/icons/hidden.png') {
      pos = marker.getPosition();
      d = dist(parseFloat(e.latitude), parseFloat(e.longitude), pos.lat(), pos.lng());
      if ((1 < d && d < smallestMarkerDist)) {
        smallestMarkerDist = d;
      }
      if ((1 < d && d < markersTooCloseOnMap(map.getZoom()))) {
        return true;
      }
    }
  }
  return false;
};

updateMarker = function(i, e, hidden) {
  /*
   	This function updates only one marker. Checks to see
   	if it's already on the map, and puts on on there if not.
  */

  /* Default iconname
  */

  var inarray, marker, position, returnthismarker, testmarker, _i, _len;
  if (hidden) {
    e.iconname = 'hidden';
  } else if (e.type != null) {
    e.iconname = iconnametypes[e.type.trim().toLowerCase()];
  }
  if (!(e.iconname != null)) {
    e.iconname = 'birthday';
  }
  position = new google.maps.LatLng(e.latitude, e.longitude);
  marker = markersArray[i];
  returnthismarker = marker;
  inarray = false;
  for (_i = 0, _len = markersArray.length; _i < _len; _i++) {
    testmarker = markersArray[_i];
    if ((testmarker.getPosition() != null) && testmarker.getPosition().equals(position)) {
      inarray = true;
      returnthismarker = testmarker;
      if (testmarker.getIcon() !== '/static/icons/' + e.iconname + '.png') {
        testmarker.setIcon('/static/icons/' + e.iconname + '.png');
        updateInfoWindow(testmarker, e, hidden);
      }
      break;
    }
  }
  if (!inarray) {
    marker.name = e.name;
    marker.setPosition(position);
    marker.setMap(map);
    marker.setIcon('/static/icons/' + e.iconname + '.png');
    updateInfoWindow(marker, e, hidden);
  }
  return returnthismarker;
};

updateInfoWindow = function(marker, e, hidden) {
  google.maps.event.clearInstanceListeners(marker);
  if (hidden) {
    return;
  }
  google.maps.event.addListener(marker, 'click', function() {
    return location.href = e.sourceurl;
  });
  google.maps.event.addListener(marker, 'mouseover', function() {
    $('#' + e._id).addClass("highlighted");
    infoWindow.setContent(buildInfoWindowContent(e));
    return infoWindow.open(map, marker);
  });
  google.maps.event.addListener(marker, 'mouseout', function() {
    $('#' + e._id).removeClass("highlighted");
    return infoWindow.close(map, marker);
  });
  return marker;
};

clearMarkers = function() {
  var marker, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = markersArray.length; _i < _len; _i++) {
    marker = markersArray[_i];
    marker.setPosition(null);
    _results.push(marker.setMap(null));
  }
  return _results;
};

/* Date formatter
*/


cleanFormatDate = function(datestring) {
  return moment.utc(datestring).calendar().replace("Today at 12:00 AM", "Tomorrow").replace("Yesterday at 12:00 AM", "Today");
};

/* Event listing formatters
*/


listEvent = function(e, target, marker) {
  target.append(eventListing(e));
  $('#' + e._id).mouseover(function() {
    infoWindow.setContent(buildInfoWindowContent(e));
    return infoWindow.open(map, marker);
  });
  return $('#' + e._id).mouseleave(function() {
    return infoWindow.close(map, marker);
  });
};

eventListing = function(e) {
  if (!(e.type != null)) {
    e.type = "";
  }
  if (e.venue_name === "unk") {
    e.venue_name = " ";
  }
  return "<li id='" + e._id + "'>\n	<span class=\"toprow\">\n		<a href='" + e.sourceurl + "'>\n			<b>\n				" + e.type + "\n			</b>\n			" + e.name + "\n		</a>\n		</span>\n	<br />\n</li>";
};

buildInfoWindowContent = function(e) {
  return "<div class='mapmarkerpopup'>\n	<b> " + e.name + "</b><br />\n	" + e.venue_name + "<br />\n	" + (cleanFormatDate(e.date)) + "\n	<hr />\n	" + e.description + "<br />\n	<i>(from " + e.source + ")</i>\n	</div>";
};

/*
  This is where the functions go that query google & elastic search
    as well as the actual queries themselves
*/


/*
	Geocode
*/


geocode = function(address, onSuccess) {
  if (geocoder != null) {
    geocoder = new google.maps.Geocoder();
  }
  return geocoder.geocode({
    'address': address
  }, function(results, status) {
    if (status === google.maps.GeocoderStatus.OK) {
      return onSuccess(results);
    }
  });
};

/*
   Elastic Search
*/


queryElasticSearch = function(input, query, success) {
  var ajaxOptions;
  ajaxOptions = {
    dataType: "jsonp",
    type: "GET",
    url: "http://coconut.asperous.us:9200/events/_search",
    data: {
      source: JSON.stringify(query(input))
    },
    success: success
  };
  return $.ajax(ajaxOptions);
};

bounderyQ = function(map_bounds) {
  var datefilter;
  datefilter = (function() {
    if (!(window.activeDateFilter != null)) {
      window.activeDateFilter = "week";
    }
    return {
      from: window.activeDateFilter === "tomorrow" ? "now+1d/d" : "now/d",
      to: (function() {
        switch (window.activeDateFilter) {
          case "all":
            return null;
          case "today":
            return "now/d";
          case "tomorrow":
            return "now+1d/d";
          case "week":
            return "now/w";
          case "month":
            return "now/M";
          default:
            return null;
        }
      })()
    };
  })();
  return {
    size: numberOfMarkersToShowOnPage,
    sort: [
      {
        score: {
          order: "asc"
        }
      }
    ],
    query: {
      filtered: {
        query: getQuery(),
        filter: {
          and: [
            {
              range: {
                date: datefilter
              }
            }, {
              geo_bounding_box: {
                "location": {
                  top_left: {
                    lat: map_bounds.getNorthEast().lat(),
                    lon: map_bounds.getSouthWest().lng()
                  },
                  bottom_right: {
                    lat: map_bounds.getSouthWest().lat(),
                    lon: map_bounds.getNorthEast().lng()
                  }
                }
              }
            }
          ]
        }
      }
    }
  };
};

complexQ = function(input) {
  return {
    size: 5,
    query: {
      dis_max: {
        queries: [
          {
            text: {
              _all: {
                query: input,
                fuzziness: 0.4,
                operator: "and"
              }
            }
          }, {
            custom_boost_factor: {
              query: {
                text_phrase_prefix: {
                  _all: input
                }
              },
              boost_factor: 2
            }
          }
        ]
      }
    },
    filter: {
      range: {
        date: {
          from: "now/d"
        }
      }
    }
  };
};

phrasePrefixQuery = function(input) {
  return {
    size: 5,
    query: {
      text_phrase_prefix: {
        name: {
          query: input,
          max_expansions: 10
        }
      }
    },
    filter: {
      range: {
        date: {
          from: "now/d"
        }
      }
    }
  };
};

getQuery = function() {
  if ($('#searchbox').val() !== "") {
    return {
      text_phrase_prefix: {
        _all: {
          query: $('#searchbox').val(),
          max_expansions: 10
        }
      }
    };
  } else {
    return {
      match_all: {}
    };
  }
};
